import pytest
from agents.annotator_agent import AnnotatorAgent
import os

class DummyAnnotator(AnnotatorAgent):
    """Subclasse que sobrep√µe a chamada OpenAI para evitar requests reais."""
    def __init__(self, mapping):
        super().__init__(model="dummy")
        self._mapping = mapping

    def _call_openai(self, content_snippet):  # noqa: D401
        """Retorna resposta fixa conforme mapeamento ou um JSON default v√°lido."""
        return self._mapping.get(content_snippet, {
            "keep": True,
            "tags": ["general"],
            "reason": "Resposta simulada padr√£o."
        })

    def process_chunk(self, content_snippet):
        """Simula o processamento de um chunk chamando o _call_openai mockado."""
        if not content_snippet or not isinstance(content_snippet, str) or len(content_snippet.strip()) < 1:
            return {"keep": False, "tags": ["invalid_snippet"], "reason": "Trecho inv√°lido no mock."}
        
        return self._call_openai(content_snippet)

@pytest.fixture
def dummy_annotator_factory():
    """Retorna uma f√°brica que cria DummyAnnotator com mapeamentos customizados."""
    def _create(mapping=None):
        return DummyAnnotator(mapping or {})
    return _create

@pytest.fixture
def mock_gdrive_api_responses():
    """Fixture para simular respostas da API do Google Drive."""
    # Simula uma estrutura de arquivos simples em diferentes pastas
    responses = {
        '/aulas/aula1.gdoc': {'id': 'id_aula1', 'mimeType': 'application/vnd.google-apps.document'},
        '/emails/email_importante.txt': {'id': 'id_email1', 'mimeType': 'text/plain'},
        '/copys/copy_venda.docx': {'id': 'id_copy1', 'mimeType': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'},
        '/posts/post_blog.pdf': {'id': 'id_post1', 'mimeType': 'application/pdf'},
    }
    # Fun√ß√£o interna para simular a chamada API
    def _get_file_metadata(file_path):
        return responses.get(file_path)
    return _get_file_metadata # Retorna a fun√ß√£o de mock

@pytest.fixture
def mock_docling_extraction_results():
    """Fixture para simular resultados da extra√ß√£o do Docling."""
    results = {
        'id_aula1': "Conte√∫do extra√≠do da aula 1.",
        'id_email1': "Este √© o conte√∫do do email importante.",
        'id_copy1': "Texto da copy de vendas.",
        'id_post1': "Conte√∫do do post em PDF.",
        'id_duplicate': "Conte√∫do duplicado para teste.",
        'id_emoji': "Texto com muitos emojis üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£üòäüòáüôÇüôÉüòâüòåüòçü•∞."
    }
    def _get_extraction(file_id):
        return results.get(file_id, "Conte√∫do padr√£o n√£o encontrado.")
    return _get_extraction

@pytest.fixture(params=[
    ('.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'Conte√∫do Docx'),
    ('.gdoc', 'application/vnd.google-apps.document', 'Conte√∫do GDoc'),
    ('.pdf', 'application/pdf', 'Conte√∫do PDF'),
    ('.txt', 'text/plain', 'Conte√∫do TXT')
])
def sample_file_types(request):
    """Fixture parametrizada para fornecer tipos de arquivos de exemplo."""
    # Retorna uma tupla: (extens√£o, mime_type, conte√∫do_simulado)
    return request.param

@pytest.fixture
def generate_test_data():
    """Gera dados de teste simples (agora como fixture)."""
    # Retorna a pr√≥pria fun√ß√£o para que possa ser chamada com par√¢metros no teste
    def _generate(content_type="text", length=100):
        if content_type == "text":
            return "Palavra " * length
        elif content_type == "emoji":
            return "üòÄ " * length
        return "Conte√∫do de teste padr√£o."
    return _generate

# Configura√ß√£o b√°sica para pytest-env (se necess√°rio, mas geralmente autom√°tico)
# Se um arquivo pytest.ini ou pyproject.toml n√£o existir, pode ser necess√°rio
# for√ßar o carregamento do .env explicitamente em alguns casos, mas
# vamos assumir que funciona por padr√£o por enquanto. 