# Use a imagem oficial do Python como base
FROM python:3.11-slim

# Definir o diretório de trabalho dentro do contêiner
WORKDIR /app

# Copiar os arquivos de dependência
# Usando api/requirements.txt por enquanto, pois um requirements dedicado para o worker não foi encontrado.
# O caminho COPY é relativo à raiz do contexto de build (que será worker/)
COPY ./requirements.txt /app/requirements.txt

# MOSTRAR O CONTEÚDO DO requirements.txt ANTES DE INSTALAR
RUN echo ">>> BEGINNING OF /app/requirements.txt (Dockerfile.worker) <<<" && \
    cat /app/requirements.txt && \
    echo ">>> END OF /app/requirements.txt (Dockerfile.worker) <<<"

# Instalar as dependências.
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copiar o código fonte do worker (incluindo ingestion, etl, e infra)
# Os caminhos COPY são relativos ao diretorio worker/
COPY ./ingestion /app/ingestion
COPY ./etl /app/etl
COPY ./infra /app/infra

# Adicione outros diretórios se o script de teste ou suas importações precisarem

# Copiar o script de teste para um local esperado dentro de /app
# Se você salvou test_supabase_connect.py em worker_service/etl/
COPY ./worker_service/etl/test_supabase_connect.py /app/worker_service/etl/test_supabase_connect.py

# Copiar toda a pasta worker_service e agents (se necessário para o teste)
# Se test_supabase_connect.py não tiver dependências em outros módulos locais,
# apenas ele precisaria ser copiado.
COPY ./worker_service /app/worker_service
# COPY ./agents /app/agents # Descomente se o script de teste importar de ./agents

# Copiar o script de shell para o diretório /app (ou /app/worker_service/etl/ se preferir)
COPY ./worker_service/etl/run_and_log_test.sh /app/run_and_log_test.sh
# Dar permissão de execução para o script shell
RUN chmod +x /app/run_and_log_test.sh

# Garantir que o diretório de trabalho para o CMD seja /app
WORKDIR /app

# CMD original (comentado temporariamente):
# CMD ["python", "./worker_service/etl/annotate_and_index.py"]
# CMD ["/app/worker_entrypoint.sh"]

# ENTRYPOINT comentado para permitir CMD anteriormente, agora vamos usá-lo.
# ENTRYPOINT ["tail", "-f", "/dev/null"] 

# Novo CMD para executar o wrapper script (MUDANDO PARA ENTRYPOINT)
# CMD ["/app/run_and_log_test.sh"]
ENTRYPOINT ["/app/run_and_log_test.sh"] 