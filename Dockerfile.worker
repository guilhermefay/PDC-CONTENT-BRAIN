# Use a imagem oficial do Python como base
FROM python:3.11-slim

# Definir o diretório de trabalho dentro do contêiner
WORKDIR /app

# Copiar os arquivos de dependência
# Usando api/requirements.txt por enquanto, pois um requirements dedicado para o worker não foi encontrado.
# O caminho COPY é relativo à raiz do contexto de build (que será worker/)
COPY ./requirements.txt /app/requirements.txt

# MOSTRAR O CONTEÚDO DO requirements.txt ANTES DE INSTALAR
RUN echo ">>> BEGINNING OF /app/requirements.txt (Dockerfile.worker) <<<" && \
    cat /app/requirements.txt && \
    echo ">>> END OF /app/requirements.txt (Dockerfile.worker) <<<"

# Instalar as dependências.
RUN echo ">>> BUILDING: Dockerfile.worker - requirements.txt copiado <<<" && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    echo ">>> BUILDING: Dockerfile.worker - dependências instaladas <<<"

# Copiar os diretórios da aplicação para dentro de /app
COPY ./worker_service/ /app/worker_service/
COPY ./agents/ /app/agents/
# Adicionar outros diretórios da raiz se forem importados diretamente por scripts em /app
# COPY ./shared/ /app/shared/ # Exemplo, se existir e for necessário

# Copiar scripts da raiz para /app
COPY ./worker_entrypoint.sh /app/worker_entrypoint.sh
COPY ./check_imports.py /app/check_imports.py 

# Garantir permissões de execução
RUN chmod +x /app/worker_entrypoint.sh && \
    (test ! -f /app/check_imports.py || chmod +x /app/check_imports.py) # chmod +x apenas se check_imports.py existir

WORKDIR /app

# Deixar o Railway descobrir e executar /app/worker_entrypoint.sh (que agora contém nosso teste).
# O "Start Command" na UI do Railway deve estar VAZIO.
# Todos os CMD e ENTRYPOINT customizados para teste foram removidos daqui. 