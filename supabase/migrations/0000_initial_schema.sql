-- supabase/migrations/0000_initial_schema.sql

-- Tabela para armazenar chunks de documentos processados e suas anotações
CREATE TABLE IF NOT EXISTS documents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    document_id UUID NOT NULL UNIQUE,       -- ID único usado também pelo R2R
    content TEXT,
    metadata JSONB,                          -- Metadados originais (source_name, origin, chunk_index, etc.)
    annotation_tags TEXT[],                 -- Tags atribuídas pela IA
    annotation_keep BOOLEAN,                  -- Flag se o chunk deve ser mantido
    annotation_reason TEXT,                   -- Razão dada pela IA para keep/discard
    token_count INTEGER,                      -- Contagem de tokens do chunk
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Índices opcionais para otimizar consultas (podem ser adicionados depois se necessário)
-- CREATE INDEX IF NOT EXISTS idx_documents_document_id ON documents(document_id);
-- CREATE INDEX IF NOT EXISTS idx_documents_tags ON documents USING GIN (annotation_tags);

-- Comentários sobre as colunas
COMMENT ON COLUMN documents.document_id IS 'ID único do documento/chunk, compartilhado com R2R.';
COMMENT ON COLUMN documents.metadata IS 'Metadados variados sobre a origem e o chunking.';
COMMENT ON COLUMN documents.annotation_tags IS 'Tags de classificação atribuídas pela IA.';
COMMENT ON COLUMN documents.annotation_keep IS 'Indica se a IA recomendou manter este chunk.';
COMMENT ON COLUMN documents.annotation_reason IS 'Justificativa da IA para a decisão de keep/discard.';
COMMENT ON COLUMN documents.token_count IS 'Número de tokens estimado para o conteúdo do chunk.';

-- Trigger para atualizar automaticamente 'updated_at'
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON documents
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

ALTER TABLE documents ENABLE ROW LEVEL SECURITY;

-- Políticas RLS básicas (ajustar conforme necessidade)
CREATE POLICY "Permitir leitura para usuários autenticados" ON documents
FOR SELECT USING (auth.role() = 'authenticated');

-- Permitir inserção apenas para service_role (usado pelo ETL)
CREATE POLICY "Permitir inserção para service_role" ON documents
FOR INSERT WITH CHECK (auth.role() = 'service_role');

-- Permitir atualização apenas para service_role (se necessário)
-- CREATE POLICY "Permitir atualização para service_role" ON documents
-- FOR UPDATE USING (auth.role() = 'service_role');

-- Permitir deleção apenas para service_role (se necessário)
-- CREATE POLICY "Permitir deleção para service_role" ON documents
-- FOR DELETE USING (auth.role() = 'service_role'); 