############################################################
üìö CONTEXTO OFICIAL ‚Äî PDC (Pediatra de Consult√≥rio)
############################################################
1. Identidade
   ‚Ä¢ **Nome**: Pediatra de Consult√≥rio (PDC)  
   ‚Ä¢ **Miss√£o**: Ensinar m√©dicos pediatras a transformar plant√µes em carreira de consult√≥rio lucrativo, com gest√£o, marketing e experi√™ncia premium para fam√≠lias.  
   ‚Ä¢ **Brand Voice**: autorit√°rio + emp√°tico; met√°foras m√©dicas; CTA claro; ganchos fortes ("Voc√™ cuida dos filhos dos outros‚Ä¶ e os seus?").

2. Tipos de Conte√∫do
   ‚Ä¢ E-mails de nurturing (produtos, lan√ßamentos)  
   ‚Ä¢ Carross√©is Instagram (educacionais ‚Üí MOFU ‚Ä¢ CTA final)  
   ‚Ä¢ Posts est√°ticos (quotes, estat√≠sticas)  
   ‚Ä¢ P√°ginas de vendas / capturas  
   ‚Ä¢ Transcri√ß√µes de aulas t√©cnicas (gest√£o, funil, atendimento humanizado)

3. Matriz de N√≠veis de Consci√™ncia (usar como `tags.awareness`)
   | C√≥digo | Descri√ß√£o                                                    |
   |--------|--------------------------------------------------------------|
   | TOFU   | Totalmente inconsciente (acha que plant√£o √© "ok")           |
   | PROBLEMA | Reconhece dor do plant√£o, mas n√£o v√™ solu√ß√£o              |
   | SOLU√á√ÉO | Sabe que consult√≥rio resolve, mas n√£o sabe como come√ßar    |
   | PRODUTO | Conhece o M√©todo PDC, compara ofertas                       |
   | BOFU   | J√° quer o PDC, precisa da oferta final / b√¥nus               |

4. Emo√ß√µes-chave (usar em `tags.tone`)
   autoridade ‚Ä¢ urg√™ncia ‚Ä¢ inspira√ß√£o ‚Ä¢ empatia ‚Ä¢ prova social

5. Temas-chave (usar em `tags.tema`)
   gest√£o_consult√≥rio ‚Ä¢ marketing_pedi√°trico ‚Ä¢ funil_whatsapp ‚Ä¢ vacinas ‚Ä¢ precifica√ß√£o

6. Exemplo de JSON desejado
```json
{
  "keep": true,
  "tags": {
    "awareness": "SOLU√á√ÉO",
    "tone": ["empatia", "inspira√ß√£o"],
    "tema": ["gest√£o_consult√≥rio"]
  },
  "reason": "Explica passo inicial de gest√£o que falta √† maioria dos pediatras."
}
```

7. Crit√©rios de "DROP"
   ‚Ä¢ Trechos de lives com "obrigado por assistirem"  
   ‚Ä¢ Duplicatas > 90 % similares  
   ‚Ä¢ Textos sem contexto (emojis soltos, "teste microfone")  
   ‚Ä¢ Conte√∫do que contraria diretrizes m√©dicas ou √©ticas

8. Limite de tags
   ‚Ä¢ m√°ximo 1 para `awareness`  
   ‚Ä¢ at√© 2 para `tone`  
   ‚Ä¢ at√© 2 para `tema`

############################################################


############################################################
PRD: Implementar AnnotatorAgent como Agente CrewAI
############################################################
üîñ **C√≥digo do Projeto**: `pdc-content-brain`

## 1. Vis√£o Geral
Queremos transformar o Annotator‚Äîrespons√°vel por filtrar, classificar e taggear chunks de conte√∫do‚Äîem um **agente CrewAI formal**.  
Ele rodar√° logo ap√≥s o split/limpeza b√°sica e antes do Curator, garantindo que apenas trechos √∫teis e rotulados cheguem ao pgvector.

## 2. Objetivos
1. Criar um agente CrewAI chamado `AnnotatorAgent`.
2. Integr√°-lo ao pipeline ETL (`etl/annotate_and_index.py`).
3. Gravar sa√≠das aprovadas em Supabase com estrutura `{ keep, tags, reason }`.
4. Incluir testes autom√°ticos para processar lote de 10 chunks fict√≠cios.

## 3. Requisitos Funcionais
| # | Descri√ß√£o |
|---|-----------|
| 3.1 | Criar **`agents/annotator_agent.py`** estendendo `crew_ai.Agent`. |
| 3.2 | Prompt do agente:<br>"Voc√™ √© redator s√™nior do PDC‚Ä¶ devolva JSON `{'keep': bool, 'tags': [...], 'reason': ''}`." |
| 3.3 | Modelo LLM: `gpt-4o`, `temperature=0.1`. |
| 3.4 | Sem memory inicial; `allow_delegation=False`. |
| 3.5 | Novo script **`etl/annotate_and_index.py`**:<br>  ‚Ä¢ Ler arquivos em `data/raw/`<br>  ‚Ä¢ Chamar `AnnotatorAgent.run(chunk)`<br>  ‚Ä¢ Se `keep==true`, inserir em Supabase `documents` com coluna `tags` (JSONB). |
| 3.6 | Adaptar **`schema.sql`**:<br>  `ALTER TABLE documents ADD COLUMN tags JSONB DEFAULT '{}'::jsonb;` |
| 3.7 | Atualizar README t√©cnico com instru√ß√µes `python etl/annotate_and_index.py`. |

## 4. Depend√™ncias
- T1 (Supabase provisionado) ‚úÖ  
- T2 (pgvector & schema base) ‚úÖ  
- OpenAI API key no `.env`  
- Package `crewai>=0.6.0` instalado

## 5. Crit√©rios de Aceita√ß√£o
1. Rodar `python etl/annotate_and_index.py` com 10 chunks exemplo ‚Üí inserir ‚â•1 registro em `documents` com `tags` n√£o vazias.  
2. `pytest tests/test_annotator.py` passa todos os asserts (`keep` bool v√°lido, tags ‚â§ 5, raz√£o ‚â§ 30 palavras).  
3. Coverage de teste ‚â• 80 % no m√≥dulo `agents/annotator_agent.py`.  
4. Commit final: **`feat: T3 done ‚Äì AnnotatorAgent CrewAI`**

## 6. Estrat√©gia de Teste
- Arquivo `tests/test_annotator.py` injeta 3 chunks de casos borda (duplicata, emoji, texto √∫til).  
- Verifica retorno JSON v√°lido e descarte correto dos ruins.  
- Usa `pytest` + `pytest-env` para carregar as keys do `.env`.

## 7. Roadmap de Tarefas Sugerido
1. **Criar classe AnnotatorAgent** (`agents/annotator_agent.py`).  
2. **Modificar schema** para coluna `tags JSONB`.  
3. **Escrever script etl/annotate_and_index.py** chamando o agente.  
4. **Adicionar testes unit√°rios**.  
5. **Atualizar README**.  
6. **Executar lote piloto** e validar m√©tricas.

############################################################ 